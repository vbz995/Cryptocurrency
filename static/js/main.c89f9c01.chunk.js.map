{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","utility.js","store/reducers/fetchingCryptos.js","store/reducers/selectedCrypto.js","store/reducers/fetchBitcoin.js","store/reducers/crypto.js","store/actions/actionTypes.js","store/reducers/currency.js","store/actions/crypto.js","store/actions/pagination.js","components/Paginations.js","components/CryptoCurrencyList.js","components/CryptoCurrencyDetails.js","components/Settings.js","store/actions/currency.js","store/reducers/pagination.js","index.js"],"names":["Navbars","Navbar","bg","variant","Brand","as","Link","to","Nav","className","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","fetchingCryptoSuccess","state","action","data","cryptos","pending","fetchingCryptoPending","fetchingCryptoFail","error","getCryptoSuccess","selectedCrypto","getCryptoPending","getCryptoFail","getCryptoID","selectedId","id","fetchingBitcoinSuccess","dataBitcoin","fetchingBitcoinPending","fetchingBitcoinFail","initState","CryptoReducer","type","initialState","selectedCurrency","selectCurrency","currency","CurrencyReducer","fetchCryptos","cur","dispatch","fetch","method","headers","Accept","then","res","json","catch","fetchCryptosFail","setActivePage","active","setItemsPerPage","items","connect","activePage","pagination","crypto","itemsPerPage","SetActivePagination","FetchCryptos","SetItemsPerPage","props","pageNumbers","undefined","counter","push","Pagination","Item","key","onClick","parseInt","Math","ceil","length","First","Prev","Next","Last","pendingCrypto","errorCrypto","SelectedCryptoId","selectedCryptoId","newDataArray","useEffect","i","listData","Container","Button","Form","inline","FormLabel","DropdownButton","title","Dropdown","Spinner","animation","role","Table","striped","bordered","hover","map","history","cmc_rank","symbol","quote","price","percent_change_24h","GetSelectedCrypto","getSelectedCrypto","FetchBitcoin","fetchBitcoinFail","fetchBitcoin","Object","values","name","volume_24h","market_cap","percent_change_1h","percent_change_7d","total_supply","max_supply","H3","styled","h3","SelectCurrency","useState","ShowText","setShowText","activePagination","PaginationReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","exact","path","component","CryptoCurrencyList","CryptoCurrencyDetails","Settings","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c89f9c01.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nconst Navbars = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand as={Link} to=\"/\">\n        Cryptocurrency\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link as={Link} to=\"/\">\n          List\n        </Nav.Link>\n        <Nav.Link as={Link} to=\"/settings\">\n          Settings\n        </Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n};\nexport default Navbars;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbars from \"./components/Navbar\";\nfunction App() {\n  return <Navbars />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    }\n}","import { updateObject } from \"../../utility\";\n\nexport const fetchingCryptoSuccess = (state, action) => {\n  return updateObject(state, { data: action.cryptos, pending: false });\n};\n\nexport const fetchingCryptoPending = (state, action) => {\n  return updateObject(state, { pending: true });\n};\n\nexport const fetchingCryptoFail = (state, action) => {\n  return updateObject(state, { pending: false, error: action.error });\n};\n","import { updateObject } from \"../../utility\";\n\nexport const getCryptoSuccess = (state, action) => {\n  return updateObject(state, {\n    selectedCrypto: action.cryptos,\n    pending: false\n  });\n};\n\nexport const getCryptoPending = (state, action) => {\n  return updateObject(state, { pending: true });\n};\n\nexport const getCryptoFail = (state, action) => {\n  return updateObject(state, { pending: false, error: action.error });\n};\n\nexport const getCryptoID = (state, action) => {\n  return updateObject(state, { pending: false, selectedId: action.id });\n};\n","import { updateObject } from \"../../utility\";\n\nexport const fetchingBitcoinSuccess = (state, action) => {\n  return updateObject(state, { dataBitcoin: action.cryptos, pending: false });\n};\n\nexport const fetchingBitcoinPending = (state, action) => {\n  return updateObject(state, { pending: true });\n};\n\nexport const fetchingBitcoinFail = (state, action) => {\n  return updateObject(state, { pending: false, error: action.error });\n};\n","import * as actionTypes from \"../actions/actionTypes\";\nimport {\n  fetchingCryptoSuccess,\n  fetchingCryptoPending,\n  fetchingCryptoFail\n} from \"./fetchingCryptos\";\nimport {\n  getCryptoSuccess,\n  getCryptoPending,\n  getCryptoFail,\n  getCryptoID\n} from \"./selectedCrypto\";\nimport {\n  fetchingBitcoinSuccess,\n  fetchingBitcoinPending,\n  fetchingBitcoinFail\n} from \"./fetchBitcoin\";\n\nconst initState = {\n  dataBitcoin: null,\n  selectedId: null,\n  selectedCrypto: {},\n  data: [],\n  pending: false,\n  error: null\n};\n\nconst CryptoReducer = (state = initState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_CRYPTOS_SUCCESS:\n      return fetchingCryptoSuccess(state, action);\n    case actionTypes.FETCH_CRYPTOS_FAIL:\n      return fetchingCryptoFail(state, action);\n    case actionTypes.FETCH_CRYPTOS_PENDING:\n      return fetchingCryptoPending(state, action);\n    case actionTypes.GET_SELECTED_CRYPTOS_SUCCESS:\n      return getCryptoSuccess(state, action);\n    case actionTypes.GET_SELECTED_CRYPTOS_PENDING:\n      return getCryptoFail(state, action);\n    case actionTypes.GET_SELECTED_CRYPTOS_FAIL:\n      return getCryptoPending(state, action);\n    case actionTypes.SELECTED_CRYPTOS_ID:\n      return getCryptoID(state, action);\n    case actionTypes.FETCH_BITCOIN_SUCCESS:\n      return fetchingBitcoinSuccess(state, action);\n    case actionTypes.FETCH_BITCOIN_FAIL:\n      return fetchingBitcoinFail(state, action);\n    case actionTypes.FETCH_BITCOIN_PENDING:\n      return fetchingBitcoinPending(state, action);\n    default:\n      return { state };\n  }\n};\n\nexport default CryptoReducer;\n","export const FETCH_CRYPTOS_SUCCESS = \"FETCH_CRYPTOS_SUCCESS\";\nexport const FETCH_CRYPTOS_FAIL = \"FETCH_CRYPTOS_FAIL\";\nexport const FETCH_CRYPTOS_PENDING = \"FETCH_CRYPTOS_PENDING\";\nexport const SELECTED_CURRENCY = \"SELECTED_CURRENCY\";\nexport const SELECTED_CRYPTOS_ID = \"SELECTED_CRYPTOS_ID\";\nexport const GET_SELECTED_CRYPTOS_SUCCESS = \"GET_SELECTED_CRYPTOS_SUCCESS\";\nexport const GET_SELECTED_CRYPTOS_PENDING = \"GET_SELECTED_CRYPTOS_PENDING\";\nexport const GET_SELECTED_CRYPTOS_FAIL = \"GET_SELECTED_CRYPTOS_FAIL\";\nexport const FETCH_BITCOIN_SUCCESS = \"FETCH_BITCOIN_SUCCESS\";\nexport const FETCH_BITCOIN_FAIL = \"FETCH_BITCOIN_FAIL\";\nexport const FETCH_BITCOIN_PENDING = \"FETCH_BITCOIN_PENDING\";\nexport const SET_ACTIVE_PAGE = \"SET_ACTIVE_PAGINATION\";\nexport const SET_ITEMS_PER_PAGE = \"SET_ITEMS_PER_PAGE\";\n","import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../../utility\";\n\nconst initialState = {\n  selectedCurrency: \"USD\"\n};\n\nconst selectCurrency = (state, action) => {\n  return updateObject(state, { selectedCurrency: action.currency });\n};\nconst CurrencyReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SELECTED_CURRENCY:\n      return selectCurrency(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default CurrencyReducer;\n","import * as actionTypes from \"./actionTypes\";\n\nexport const fetchCryptosSuccess = cryptos => ({\n  type: actionTypes.FETCH_CRYPTOS_SUCCESS,\n  cryptos: cryptos\n});\n\nexport const fetchCryptosFail = error => ({\n  type: actionTypes.FETCH_CRYPTOS_FAIL,\n  error: error\n});\n\nexport const fetchCryptosPending = () => ({\n  type: actionTypes.FETCH_CRYPTOS_PENDING\n});\nexport const fetchCryptos = cur => {\n  return dispatch => {\n    dispatch(fetchCryptosPending());\n    fetch(\n      `https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?convert=${cur}`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"X-CMC_PRO_API_KEY\": \"659b8981-4fc1-4966-8d4e-fe3a3e94caf5\",\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(res => {\n        if (res.error) {\n          throw res.error;\n        }\n        dispatch(fetchCryptosSuccess(res.data));\n      })\n      .catch(error => {\n        dispatch(fetchCryptosFail(error));\n      });\n  };\n};\nexport const getCryptoSuccess = cryptos => ({\n  type: actionTypes.GET_SELECTED_CRYPTOS_SUCCESS,\n  cryptos: cryptos\n});\n\nexport const getCryptoFail = error => ({\n  type: actionTypes.GET_SELECTED_CRYPTOS_FAIL,\n  error: error\n});\n\nexport const getCryptoPending = () => ({\n  type: actionTypes.GET_SELECTED_CRYPTOS_PENDING\n});\n\nexport const getSelectedCrypto = (id, currency) => {\n  return dispatch => {\n    dispatch(getCryptoPending());\n    fetch(\n      `https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=${id}&convert=${currency}`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"X-CMC_PRO_API_KEY\": \"659b8981-4fc1-4966-8d4e-fe3a3e94caf5\",\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(res => {\n        if (res.error) {\n          throw res.error;\n        }\n        dispatch(getCryptoSuccess(res.data));\n      })\n      .catch(error => {\n        dispatch(getCryptoFail(error));\n      });\n  };\n};\n\nexport const selectedCryptoId = id => ({\n  type: actionTypes.SELECTED_CRYPTOS_ID,\n  id: id\n});\n\nexport const fetchBitcoinSuccess = cryptos => ({\n  type: actionTypes.FETCH_BITCOIN_SUCCESS,\n  cryptos: cryptos\n});\n\nexport const fetchBitcoinFail = error => ({\n  type: actionTypes.FETCH_BITCOIN_FAIL,\n  error: error\n});\n\nexport const fetchBitcoinPending = () => ({\n  type: actionTypes.FETCH_BITCOIN_PENDING\n});\n\nexport const fetchBitcoin = id => {\n  return dispatch => {\n    dispatch(fetchBitcoinPending());\n    fetch(\n      `https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=${id}&convert=BTC`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"X-CMC_PRO_API_KEY\": \"659b8981-4fc1-4966-8d4e-fe3a3e94caf5\",\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(res => {\n        if (res.error) {\n          throw res.error;\n        }\n        dispatch(fetchBitcoinSuccess(res.data));\n      })\n      .catch(error => {\n        dispatch(fetchBitcoinFail(error));\n      });\n  };\n};\n","import * as actionTypes from \"./actionTypes\";\n\nexport const setActivePage = active => ({\n  type: actionTypes.SET_ACTIVE_PAGE,\n  active: active\n});\n\nexport const setItemsPerPage = items => ({\n  type: actionTypes.SET_ITEMS_PER_PAGE,\n  items: items\n});\n","import React from \"react\";\nimport { Pagination } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  fetchCryptos,\n  setActivePage,\n  setItemsPerPage\n} from \"../store/actions/index\";\n\nconst Paginations = props => {\n  const pageNumbers = [];\n  const {\n    data,\n    selectedCurrency,\n    itemsPerPage,\n    activePage,\n    SetActivePagination,\n    FetchCryptos\n  } = props;\n  if (data !== undefined) {\n    for (\n      let counter = 0;\n      counter < Math.ceil(data.length / itemsPerPage);\n      counter++\n    ) {\n      pageNumbers.push(\n        <Pagination.Item\n          key={counter}\n          onClick={() => {\n            activePage === counter + 1\n              ? FetchCryptos(selectedCurrency)\n              : SetActivePagination(counter + 1);\n          }}\n          active={counter + 1 === activePage}\n        >\n          {parseInt(counter + 1)}\n        </Pagination.Item>\n      );\n    }\n  }\n\n  return (\n    <Pagination className=\"w-100\">\n      <Pagination.First\n        onClick={() => {\n          activePage === 1\n            ? FetchCryptos(selectedCurrency)\n            : SetActivePagination(1);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          activePage === 1\n            ? FetchCryptos(selectedCurrency)\n            : SetActivePagination(parseInt(activePage - 1));\n        }}\n      />\n      {pageNumbers}\n      <Pagination.Next\n        onClick={() => {\n          activePage === Math.ceil(data.length / itemsPerPage)\n            ? FetchCryptos(selectedCurrency)\n            : SetActivePagination(parseInt(activePage + 1));\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          activePage === Math.ceil(data.length / itemsPerPage)\n            ? FetchCryptos(selectedCurrency)\n            : SetActivePagination(Math.ceil(data.length / itemsPerPage));\n        }}\n      />\n    </Pagination>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    activePage: state.pagination.activePage,\n    data: state.crypto.data,\n    selectedCurrency: state.currency.selectedCurrency,\n    itemsPerPage: state.pagination.itemsPerPage\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    SetActivePagination: active => dispatch(setActivePage(active)),\n    FetchCryptos: cur => dispatch(fetchCryptos(cur)),\n    SetItemsPerPage: items => dispatch(setItemsPerPage(items))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Paginations);\n","/* eslint-disable no-unused-expressions */\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  fetchCryptos,\n  selectedCryptoId,\n  setItemsPerPage,\n  setActivePage\n} from \"../store/actions/index\";\nimport {\n  Table,\n  Spinner,\n  FormLabel,\n  Dropdown,\n  DropdownButton,\n  Form,\n  Container,\n  Button\n} from \"react-bootstrap\";\nimport Paginations from \"./Paginations\";\n\nconst listData = (data, activePage, itemsPerPage, newDataArray) => {\n  for (\n    let i = (activePage - 1) * itemsPerPage;\n    i < activePage * itemsPerPage;\n    i++\n  ) {\n    data[i] !== undefined ? newDataArray.push(data[i]) : null;\n  }\n};\nconst CryptocurrencyList = props => {\n  const newDataArray = [];\n  const {\n    FetchCryptos,\n    data,\n    pendingCrypto,\n    selectedCurrency,\n    SelectedCryptoId,\n    activePage,\n    itemsPerPage,\n    SetActivePagination,\n    SetItemsPerPage\n  } = props;\n\n  useEffect(\n    () => FetchCryptos(selectedCurrency),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [activePage, itemsPerPage]\n  );\n  data !== undefined\n    ? listData(data, activePage, itemsPerPage, newDataArray)\n    : null;\n  return (\n    <Container>\n      <Button\n        className=\"float-left\"\n        onClick={() => FetchCryptos(selectedCurrency)}\n      >\n        REFRESH\n      </Button>\n      <Form inline className=\"float-right\">\n        <FormLabel>Select number items per page: </FormLabel>\n        <DropdownButton\n          className=\"ml-2\"\n          id=\"dropdown-basic-button\"\n          title={itemsPerPage}\n        >\n          <Dropdown.Item\n            onClick={() => {\n              SetItemsPerPage(5);\n              SetActivePagination(1);\n            }}\n          >\n            5\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={() => {\n              SetItemsPerPage(10);\n              SetActivePagination(1);\n            }}\n          >\n            10\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={() => {\n              SetItemsPerPage(20);\n              SetActivePagination(1);\n            }}\n          >\n            20\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={() => {\n              SetItemsPerPage(50);\n              SetActivePagination(1);\n            }}\n          >\n            50\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={() => {\n              SetItemsPerPage(100);\n              SetActivePagination(1);\n            }}\n          >\n            100\n          </Dropdown.Item>\n        </DropdownButton>\n      </Form>\n      {pendingCrypto ? (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      ) : (\n        <Container>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>Rank</th>\n                <th>Symbol</th>\n                <th>Price in {selectedCurrency}</th>\n                <th>24 hour change</th>\n              </tr>\n            </thead>\n            <tbody>\n              {newDataArray.map(data => {\n                return (\n                  // eslint-disable-next-line no-restricted-globals\n                  <tr\n                    key={data.id}\n                    onClick={() => {\n                      SelectedCryptoId(data.id);\n                      props.history.push(\"/details\");\n                    }}\n                  >\n                    <td>{data.cmc_rank}</td>\n                    <td>{data.symbol}</td>\n                    <td>{data.quote[selectedCurrency].price}</td>\n                    <td>{data.quote[selectedCurrency].percent_change_24h}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n          <Paginations />\n        </Container>\n      )}\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedId: state.crypto.selectedId,\n    data: state.crypto.data,\n    pendingCrypto: state.crypto.pending,\n    errorCrypto: state.crypto.error,\n    selectedCurrency: state.currency.selectedCurrency,\n    activePage: state.pagination.activePage,\n    itemsPerPage: state.pagination.itemsPerPage\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    FetchCryptos: cur => dispatch(fetchCryptos(cur)),\n    SelectedCryptoId: id => dispatch(selectedCryptoId(id)),\n    SetItemsPerPage: items => dispatch(setItemsPerPage(items)),\n    SetActivePagination: active => dispatch(setActivePage(active))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CryptocurrencyList);\n","import React, { useEffect } from \"react\";\nimport { Container, Table, Button, Spinner } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { getSelectedCrypto, fetchBitcoin } from \"../store/actions/index\";\nconst CryptoCurrencyDetails = props => {\n  const {\n    selectedCurrency,\n    GetSelectedCrypto,\n    selectedId,\n    selectedCrypto,\n    pendingCrypto,\n    dataBitcoin,\n    FetchBitcoin\n  } = props;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => GetSelectedCrypto(selectedId, selectedCurrency), [\n    selectedId,\n    selectedCurrency\n  ]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => FetchBitcoin(selectedId), [selectedId]);\n  return (\n    <Container>\n      <Button onClick={() => GetSelectedCrypto(selectedId, selectedCurrency)}>\n        REFRESH\n      </Button>\n      {pendingCrypto ? (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      ) : (\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Rank</th>\n              <th>Name</th>\n              <th>Symbol</th>\n              <th>Price in {selectedCurrency}</th>\n              <th>24h volume in {selectedCurrency}</th>\n              <th>Market cap in {selectedCurrency}</th>\n              <th>Price in Bitcoin</th>\n              <th>1h change</th>\n              <th>24h change</th>\n              <th>7d change</th>\n              <th>Total Supply</th>\n              <th>Available Supply</th>\n            </tr>\n          </thead>\n          <tbody>\n            {(selectedCrypto && dataBitcoin) !== undefined\n              ? Object.values(selectedCrypto).map(data => {\n                  return (\n                    <tr key={data.cmc_rank}>\n                      <td>{data.cmc_rank}</td>\n                      <td>{data.name}</td>\n                      <td>{data.symbol}</td>\n                      <td>{data.quote[selectedCurrency].price}</td>\n                      <td>{data.quote[selectedCurrency].volume_24h}</td>\n                      <td>{data.quote[selectedCurrency].market_cap}</td>\n                      <td>\n                        {Object.values(dataBitcoin).map(\n                          data => data.quote[\"BTC\"].price\n                        )}\n                      </td>\n                      <td>{data.quote[selectedCurrency].percent_change_1h}</td>\n                      <td>{data.quote[selectedCurrency].percent_change_24h}</td>\n                      <td>{data.quote[selectedCurrency].percent_change_7d}</td>\n                      <td>{data.total_supply}</td>\n                      <td>{data.max_supply}</td>\n                    </tr>\n                  );\n                })\n              : null}\n          </tbody>\n        </Table>\n      )}\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    dataBitcoin: state.crypto.dataBitcoin,\n    selectedId: state.crypto.selectedId,\n    selectedCrypto: state.crypto.selectedCrypto,\n    data: state.crypto.data,\n    pendingCrypto: state.crypto.pending,\n    errorCrypto: state.crypto.error,\n    selectedCurrency: state.currency.selectedCurrency\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    GetSelectedCrypto: (id, selectedCurrency) =>\n      dispatch(getSelectedCrypto(id, selectedCurrency)),\n    FetchBitcoin: id => dispatch(fetchBitcoin(id))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CryptoCurrencyDetails);\n","import React, { useState } from \"react\";\nimport { Dropdown, DropdownButton, Container } from \"react-bootstrap\";\nimport { selectCurrency } from \"../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nconst H3 = styled.h3`\n  color: green;\n`;\nconst Currency = props => {\n  const [ShowText, setShowText] = useState(false);\n  const { SelectCurrency, selectedCurrency } = props;\n  return (\n    <Container>\n      {ShowText ? <H3>You choose {selectedCurrency} currency</H3> : null}\n      <DropdownButton id=\"dropdown-basic-button\" title=\"Select currency\">\n        <Dropdown.Item\n          onClick={() => {\n            SelectCurrency(\"USD\");\n            setShowText(true);\n          }}\n        >\n          USD\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={() => {\n            SelectCurrency(\"EUR\");\n            setShowText(true);\n          }}\n        >\n          EUR\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={() => {\n            SelectCurrency(\"CNY\");\n            setShowText(true);\n          }}\n        >\n          CNY\n        </Dropdown.Item>\n      </DropdownButton>\n    </Container>\n  );\n};\nconst mapStateToProps = state => {\n  return {\n    selectedCurrency: state.currency.selectedCurrency\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    SelectCurrency: currency => dispatch(selectCurrency(currency))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);\n","import * as actionTypes from './actionTypes'\n\n\nexport const selectCurrency=(currency)=>({\n    type:actionTypes.SELECTED_CURRENCY,\n    currency:currency\n})","import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../../utility\";\n\nconst initState = {\n  itemsPerPage: 10,\n  activePage: 1\n};\n\nconst activePagination = (state, action) => {\n  return updateObject(state, { activePage: action.active });\n};\nconst setItemsPerPage = (state, action) => {\n  return updateObject(state, { itemsPerPage: action.items });\n};\nconst PaginationReducer = (state = initState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_ACTIVE_PAGE:\n      return activePagination(state, action);\n    case actionTypes.SET_ITEMS_PER_PAGE:\n      return setItemsPerPage(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default PaginationReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport CryptoReducer from \"./store/reducers/crypto\";\nimport CurrencyReducer from \"./store/reducers/currency\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport CryptoCurrencyList from \"./components/CryptoCurrencyList\";\nimport CryptoCurrencyDetails from \"./components/CryptoCurrencyDetails\";\nimport Settings from \"./components/Settings\";\nimport PaginationReducer from \"./store/reducers/pagination\";\n\nconst rootReducer = combineReducers({\n  crypto: CryptoReducer,\n  currency: CurrencyReducer,\n  pagination: PaginationReducer\n});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n      <Switch>\n        <Route exact path=\"/\" component={CryptoCurrencyList}></Route>\n        <Route path=\"/details\" component={CryptoCurrencyDetails}></Route>\n        <Route path=\"/settings\" component={Settings}></Route>\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}