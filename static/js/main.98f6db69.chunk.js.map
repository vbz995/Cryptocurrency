{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","utility.js","store/reducers/crypto.js","store/actions/actionTypes.js","store/reducers/currency.js","components/CryptoCurrencyList.js","store/actions/crypto.js","components/CryptoCurrencyDetails.js","components/Settings.js","store/actions/currency.js","index.js"],"names":["Navbars","Navbar","bg","variant","Brand","as","Link","to","Nav","className","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initState","dataBitcoin","selectedId","selectedCrypto","data","pending","error","fetchingCryptoSuccess","state","action","cryptos","fetchingCryptoPending","fetchingCryptoFail","getCryptoSuccess","getCryptoPending","getCryptoFail","getCryptoID","id","fetchingBitcoinSuccess","fetchingBitcoinPending","fetchingBitcoinFail","CryptoReducer","type","initialState","selectedCurrency","selectCurrency","currency","CurrencyReducer","connect","crypto","pendingCrypto","errorCrypto","dispatch","FetchCryptos","cur","fetch","method","headers","then","res","json","catch","fetchCryptosFail","fetchCryptos","SelectedCryptoId","selectedCryptoId","props","useEffect","Container","Button","onClick","Spinner","animation","role","Table","striped","bordered","hover","undefined","map","datas","history","push","cmc_rank","symbol","quote","price","percent_change_24h","console","log","GetSelectedCrypto","getSelectedCrypto","FetchBitcoin","fetchBitcoinFail","fetchBitcoin","Object","values","key","name","volume_24h","market_cap","percent_change_1h","percent_change_7d","total_supply","max_supply","SelectCurrency","DropdownButton","title","Dropdown","Item","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","exact","path","component","CryptoCurrencyList","CryptoCurrencyDetails","Settings","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98f6db69.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Navbar, Nav} from 'react-bootstrap'\n\nconst Navbars = () => {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand as ={Link} to =\"/\">Cryptocurrency</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link as={Link} to=\"/\">List</Nav.Link>\n                <Nav.Link as={Link} to=\"/settings\">Settings</Nav.Link>\n            </Nav>\n        </Navbar>\n        \n    )\n}\nexport default Navbars\n","import React from 'react';\nimport './App.css';\nimport Navbars from './components/Navbar'\nfunction App() {\n  return <Navbars />\n}\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    }\n}","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../../utility'\n\nconst initState = {\n    dataBitcoin:null,\n    selectedId:null,\n    selectedCrypto:{},\n    data:[],\n    pending: false,\n    error: null\n\n}\nconst fetchingCryptoSuccess=(state, action)=>{\n    return updateObject(state, {data:action.cryptos, pending:false})\n}\n\nconst fetchingCryptoPending=(state, action)=>{\n    return updateObject(state, {pending:true})\n}\n\nconst fetchingCryptoFail=(state, action)=>{\n    return updateObject(state, {pending:false, error:action.error})\n}\n\n\n\nconst getCryptoSuccess=(state, action)=>{\n    return updateObject(state, {selectedCrypto:action.cryptos, pending:false})\n}\n\nconst getCryptoPending=(state, action)=>{\n    return updateObject(state, {pending:true})\n}\n\nconst getCryptoFail=(state, action)=>{\n    return updateObject(state, {pending:false, error:action.error})\n}\n\nconst getCryptoID=(state, action)=>{\n    return updateObject(state, {pending:false, selectedId:action.id})\n}\n\nconst fetchingBitcoinSuccess=(state, action)=>{\n    return updateObject(state, {dataBitcoin:action.cryptos, pending:false})\n}\n\nconst fetchingBitcoinPending=(state, action)=>{\n    return updateObject(state, {pending:true})\n}\n\nconst fetchingBitcoinFail=(state, action)=>{\n    return updateObject(state, {pending:false, error:action.error})\n}\n\n\nconst CryptoReducer = (state=initState, action)=>{\n    switch(action.type){\n        case actionTypes.FETCH_CRYPTOS_SUCCESS:\n            return fetchingCryptoSuccess(state, action)\n        case actionTypes.FETCH_CRYPTOS_FAIL:\n            return fetchingCryptoFail(state, action)\n        case actionTypes.FETCH_CRYPTOS_PENDING:\n            return fetchingCryptoPending(state, action)\n        case actionTypes.GET_SELECTED_CRYPTOS_SUCCESS:\n            return getCryptoSuccess(state, action)\n        case actionTypes.GET_SELECTED_CRYPTOS_PENDING:\n            return getCryptoFail(state, action)\n        case actionTypes.GET_SELECTED_CRYPTOS_FAIL:\n            return getCryptoPending(state, action)\n        case actionTypes.SELECTED_CRYPTOS_ID:\n            return getCryptoID(state, action)\n        case actionTypes.FETCH_BITCOIN_SUCCESS:\n            return fetchingBitcoinSuccess(state, action)\n        case actionTypes.FETCH_BITCOIN_FAIL:\n            return fetchingBitcoinFail(state, action)\n        case actionTypes.FETCH_BITCOIN_PENDING:\n            return fetchingBitcoinPending(state, action)\n        default: return {state}\n\n    }\n}\n\nexport default CryptoReducer","export const FETCH_CRYPTOS_SUCCESS = 'FETCH_CRYPTOS_SUCCESS'\nexport const FETCH_CRYPTOS_FAIL = 'FETCH_CRYPTOS_FAIL'\nexport const FETCH_CRYPTOS_PENDING='FETCH_CRYPTOS_PENDING'\nexport const SELECTED_CURRENCY='SELECTED_CURRENCY'\nexport const SELECTED_CRYPTOS_ID='SELECTED_CRYPTOS_ID'\nexport const GET_SELECTED_CRYPTOS_SUCCESS='GET_SELECTED_CRYPTOS_SUCCESS'\nexport const GET_SELECTED_CRYPTOS_PENDING='GET_SELECTED_CRYPTOS_PENDING'\nexport const GET_SELECTED_CRYPTOS_FAIL='GET_SELECTED_CRYPTOS_FAIL'\nexport const FETCH_BITCOIN_SUCCESS='FETCH_BITCOIN_SUCCESS'\nexport const FETCH_BITCOIN_FAIL='FETCH_BITCOIN_FAIL'\nexport const FETCH_BITCOIN_PENDING='FETCH_BITCOIN_PENDING'\n\n\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../../utility'\n\nconst initialState={\n    selectedCurrency:'USD',\n}\n\nconst selectCurrency=(state, action)=>{\n    return updateObject(state, {selectedCurrency:action.currency})\n\n}\nconst CurrencyReducer=(state=initialState, action)=>{\n    switch(action.type){\n        case actionTypes.SELECTED_CURRENCY:\n            return selectCurrency (state, action)\n        default: return state\n\n    }\n\n}\n\nexport default CurrencyReducer","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux';\nimport  {fetchCryptos} from '../store/actions/crypto'\nimport {Table, Spinner} from 'react-bootstrap'\nimport { Container, Button } from 'react-bootstrap';\nimport {selectedCryptoId} from '../store/actions/crypto'\n\nconst CryptocurrencyList = (props) => {\n  const {FetchCryptos, data, pendingCrypto, selectedCurrency, SelectedCryptoId}=props\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => FetchCryptos(selectedCurrency), [selectedCurrency])\n   return(\n        <Container>\n        <Button onClick = {() => FetchCryptos(selectedCurrency)}>REFRESH</Button>\n        {pendingCrypto?<Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n        </Spinner>:\n        <Table striped bordered hover>\n        <thead>\n            <tr>\n            <th>Rank</th>\n            <th>Symbol</th>\n            <th>Price in {selectedCurrency}</th>\n            <th>24 hour change</th>\n            </tr>\n        </thead>\n        <tbody>\n        {data!==undefined?data.map(datas=>{\n            return(\n              // eslint-disable-next-line no-restricted-globals\n              <tr onClick={()=>{SelectedCryptoId(datas.id); props.history.push('/details')}}>\n                <td>{datas.cmc_rank}</td>\n                <td>{datas.symbol}</td>\n                <td>{datas.quote[selectedCurrency].price}</td>\n                <td>{datas.quote[selectedCurrency].percent_change_24h}</td>\n           </tr>\n            )   \n            }): console.log(\"Fail\")}\n        </tbody> \n    </Table>\n        }\n        </Container>\n   )\n }\n\nconst mapStateToProps = state=>{\n    return{\n      selectedId:state.crypto.selectedId,\n      data:state.crypto.data,\n      pendingCrypto:state.crypto.pending,\n      errorCrypto:state.crypto.error,\n      selectedCurrency:state.currency.selectedCurrency   \n  }\n    }\n    \n  const mapDispatchToProps = dispatch =>{\n      return {\n        FetchCryptos: (cur) => dispatch(fetchCryptos(cur)),\n        SelectedCryptoId: (id) =>dispatch(selectedCryptoId(id))\n      }\n    }\n    \nexport default connect(mapStateToProps,mapDispatchToProps)(CryptocurrencyList)","import * as actionTypes from './actionTypes'\n\nexport const fetchCryptosSuccess=(cryptos)=>(\n{\n    type:actionTypes.FETCH_CRYPTOS_SUCCESS,\n    cryptos:cryptos\n\n})\n\nexport const fetchCryptosFail=(error)=>({\n    type:actionTypes.FETCH_CRYPTOS_FAIL,\n    error:error\n\n})\n\nexport const fetchCryptosPending =()=>({\n    type:actionTypes.FETCH_CRYPTOS_PENDING\n\n})\nexport const fetchCryptos=(cur)=>{\n    return dispatch=>{\n        dispatch(fetchCryptosPending())\n         fetch(`https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?convert=${cur}`, {\n            method:'GET',\n            headers:{\n                'Accept': 'application/json',\n                'X-CMC_PRO_API_KEY': '659b8981-4fc1-4966-8d4e-fe3a3e94caf5',\n                'Content-Type': 'application/json',\n            },\n\t})\n        .then(res=>res.json())\n        .then(res=>{\n            if(res.error){\n                throw(res.error)\n            }\n            dispatch(fetchCryptosSuccess(res.data))\n        })\n        .catch(error=>{\n            dispatch(fetchCryptosFail(error))\n        })\n    }\n}\nexport const getCryptoSuccess=(cryptos)=>(\n    {\n        type:actionTypes.GET_SELECTED_CRYPTOS_SUCCESS,\n        cryptos:cryptos\n    \n    })\n    \n    export const getCryptoFail=(error)=>({\n        type:actionTypes.GET_SELECTED_CRYPTOS_FAIL,\n        error:error\n    \n    })\n    \n    export const getCryptoPending =()=>({\n        type:actionTypes.GET_SELECTED_CRYPTOS_PENDING\n    \n    })\n\nexport const getSelectedCrypto=(id, currency)=>{\n    return dispatch=>{\n        dispatch(getCryptoPending())\n         fetch(`https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=${id}&convert=${currency}`, {\n            method:'GET',\n            headers:{\n                'Accept': 'application/json',\n                'X-CMC_PRO_API_KEY': '659b8981-4fc1-4966-8d4e-fe3a3e94caf5',\n                'Content-Type': 'application/json',\n            },\n\t})\n        .then(res=>res.json())\n        .then(res=>{\n            if(res.error){\n                throw(res.error)\n            }\n            dispatch(getCryptoSuccess(res.data))\n        })\n        .catch(error=>{\n            dispatch(getCryptoFail(error))\n        })\n    }\n}\n\nexport const selectedCryptoId=(id)=>(\n    {\n        type:actionTypes.SELECTED_CRYPTOS_ID,\n        id:id\n    \n    })\n\nexport const fetchBitcoinSuccess=(cryptos)=>(\n    {\n        type:actionTypes.FETCH_BITCOIN_SUCCESS,\n        cryptos:cryptos\n        \n    })\n        \nexport const fetchBitcoinFail=(error)=>(\n    {\n        type:actionTypes.FETCH_BITCOIN_FAIL,\n        error:error\n        \n    })\n        \nexport const fetchBitcoinPending =()=>(\n    {\n        type:actionTypes.FETCH_BITCOIN_PENDING\n        \n    })\n\nexport const fetchBitcoin=(id)=>{\n        return dispatch=>{\n            dispatch(fetchBitcoinPending())\n            fetch(`https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=${id}&convert=BTC`, {\n                method:'GET',\n                headers:{\n                    'Accept': 'application/json',\n                    'X-CMC_PRO_API_KEY': '659b8981-4fc1-4966-8d4e-fe3a3e94caf5',\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then(res=>res.json())\n                .then(res=>{\n                    if(res.error){\n                        throw(res.error)\n                    }\n                    dispatch(fetchBitcoinSuccess(res.data))\n                })\n                .catch(error=>{\n                    dispatch(fetchBitcoinFail(error))\n                })\n            }\n        }\n        ","import React, {useEffect} from 'react'\nimport { Container, Table,Button, Spinner} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport {getSelectedCrypto,  fetchBitcoin} from '../store/actions/crypto'\nconst CryptoCurrencyDetails = (props)=>{\n    const {selectedCurrency, GetSelectedCrypto, selectedId, selectedCrypto, pendingCrypto, dataBitcoin, FetchBitcoin}=props\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n     useEffect(() => GetSelectedCrypto(selectedId, selectedCurrency), [selectedId, selectedCurrency])\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      useEffect(() => FetchBitcoin(selectedId), [selectedId])\n    return (\n        <Container>\n        <Button onClick = {() => GetSelectedCrypto(selectedId, selectedCurrency)}>REFRESH</Button>\n        {pendingCrypto?<Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n        </Spinner>:\n        <Table striped bordered hover>\n        <thead>\n            <tr>\n            <th>Rank</th>\n            <th>Name</th>\n            <th>Symbol</th>\n            <th>Price in {selectedCurrency}</th>\n            <th>24h volume in {selectedCurrency}</th>\n            <th>Market cap in {selectedCurrency}</th>\n            <th>Price in Bitcoin</th>\n            <th>1h change</th>\n            <th>24h change</th>\n            <th>7d change</th>\n            <th>Total Supply</th>\n            <th>Available Supply</th>\n\n            </tr>\n        </thead>\n        <tbody>\n        {(selectedCrypto && dataBitcoin)!==undefined?Object.values(selectedCrypto).map(data=>{\n            return(\n              <tr key={data.cmc_rank}>\n                <td>{data.cmc_rank}</td>\n                <td>{data.name}</td>\n                <td>{data.symbol}</td>\n                <td>{data.quote[selectedCurrency].price}</td>\n                <td>{data.quote[selectedCurrency].volume_24h}</td>\n                <td>{data.quote[selectedCurrency].market_cap}</td>\n                <td>{Object.values(dataBitcoin).map(data=>data.quote['BTC'].price)}</td>\n                <td>{data.quote[selectedCurrency].percent_change_1h}</td>\n                <td>{data.quote[selectedCurrency].percent_change_24h}</td>\n                <td>{data.quote[selectedCurrency].percent_change_7d}</td>\n                <td>{data.total_supply}</td>\n                <td>{data.max_supply}</td>\n           </tr>\n\n            )   \n            }):console.log(\"Fail\")}\n        </tbody>\n       \n    </Table>\n}\n        </Container>\n            \n    )\n}\n\nconst mapStateToProps = state=>{\n    return{\n      dataBitcoin:state.crypto.dataBitcoin,\n      selectedId:state.crypto.selectedId,\n      selectedCrypto:state.crypto.selectedCrypto,\n      data:state.crypto.data,\n      pendingCrypto:state.crypto.pending,\n      errorCrypto:state.crypto.error,\n      selectedCurrency:state.currency.selectedCurrency   \n  }\n    }\n    const mapDispatchToProps = dispatch =>{\n        return {\n            GetSelectedCrypto:(id, selectedCurrency) => dispatch(getSelectedCrypto(id, selectedCurrency)),\n            FetchBitcoin:(id) =>dispatch(fetchBitcoin(id))              \n        }\n      }\nexport default connect(mapStateToProps,mapDispatchToProps)(CryptoCurrencyDetails)","import React from 'react'\nimport {Dropdown,DropdownButton, Container} from 'react-bootstrap'\nimport {selectCurrency} from '../store/actions/currency'\nimport { connect } from 'react-redux'\n\nconst Currency=(props)=>{\n    const {SelectCurrency, selectedCurrency}=props\n    return (\n        <Container>\n            <h3>Selected Currency: {selectedCurrency}</h3>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Select currency\">\n                <Dropdown.Item onClick={()=> SelectCurrency('USD')}>USD</Dropdown.Item>\n                <Dropdown.Item onClick={()=> SelectCurrency('EUR')}>EUR</Dropdown.Item>\n                <Dropdown.Item onClick={()=> SelectCurrency('CNY')}>CNY</Dropdown.Item>\n            </DropdownButton>\n        </Container>\n    )\n}\nconst mapStateToProps = state=>{\n    return{\n      selectedCurrency:state.currency.selectedCurrency   \n  }\n    }\nconst mapDispatchToProps = dispatch =>{\n    return {\n      SelectCurrency: (currency) => dispatch(selectCurrency(currency))\n    }\n  }\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency)","import * as actionTypes from './actionTypes'\n\n\nexport const selectCurrency=(currency)=>({\n    type:actionTypes.SELECTED_CURRENCY,\n    currency:currency\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {combineReducers, createStore, applyMiddleware} from 'redux'\nimport CryptoReducer from './store/reducers/crypto'\nimport CurrencyReducer from './store/reducers/currency'\nimport thunkMiddleware from 'redux-thunk'\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport CryptoCurrencyList from './components/CryptoCurrencyList'\nimport CryptoCurrencyDetails from './components/CryptoCurrencyDetails';\nimport Settings from './components/Settings';\n\n\nconst rootReducer = combineReducers({\n    crypto: CryptoReducer,\n    currency: CurrencyReducer\n\n})\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n    )\nReactDOM.render(<Provider store = {store}>\n    <Router>\n    <App/>\n    <Switch>\n        <Route exact path=\"/\" component={CryptoCurrencyList}></Route>\n        <Route path=\"/details\" component={CryptoCurrencyDetails}></Route>\n        <Route path=\"/settings\" component={Settings}></Route>      \n    </Switch>\n          \n    </Router>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}